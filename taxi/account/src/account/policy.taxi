import com.example.category.AccountCategory
import com.example.common.BadRequestError
import com.example.common.InternalServerError
import com.example.common.PII

import com.orbitalhq.auth.AuthClaims

namespace com.example.account

model Secret

type ValidCategory by (AccountCategory) -> AccountCategory == "S1234"

policy EnforceAccess against Secret (category: AccountCategory) ->  {
  read {
    when {
      category == null -> throw((BadRequestError)  { message: "Category not found" })
      ValidCategory -> Secret
      AccountErrors.hasEnumNamed(category) -> throw((BadRequestError)
      {
         message: AccountErrors.enumForName(category).message
      })
      else -> throw((InternalServerError)  {
         message: AccountErrors.enumForName('DEFAULT').message
      })
    }
  }
}

model Realm_access {
  roles : Roles[]
}

model UserCredentials inherits AuthClaims {
  realm_access : Realm_access
}

policy EnforcePCI against PII (userCredentials: UserCredentials) -> {
    read {
        when {
            userCredentials.realm_access.roles.contains("PII") -> PII
            else -> "***"
        }
    }
}
